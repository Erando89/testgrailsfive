buildscript {
    repositories {
        mavenLocal()

        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:hibernate5:7.0.7"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.1"
        classpath 'org.asciidoctor:asciidoctor-gradle-jvm:3.3.2'
    }
}

plugins {
    id "groovy"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    // nachfolgendes Plugin wird nur unter Windows und nur f√ºr run-app gebraucht, sonst nicht
    id "ua.eshepelyuk.ManifestClasspath" version "1.0.0" apply false
}

version "0.1"
group "testgrailsfive"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"org.grails.grails-gsp"

repositories {
    mavenLocal()

    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://repo.grails.org/grails/plugins" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {

    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"


    implementation "org.grails:grails-core"
    implementation "org.grails:grails-codecs"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:gsp"
    implementation 'org.grails.plugins:cache:5.0.1'
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding:4.1.0"
    implementation "org.grails.plugins:events"

    implementation("org.grails.plugins:hibernate5:7.0.7")
    implementation("org.hibernate:hibernate-core:5.4.33.Final")
    implementation("org.hibernate:hibernate-ehcache:5.4.33.Final")
}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

webdriverBinaries {
    chromedriver chromeDriverVersion
    geckodriver geckoDriverVersion
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    if (!System.getenv().containsKey('GITHUB_ACTIONS')) {
        systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
        systemProperty 'webdriver.gecko.driver', System.getProperty('webdriver.gecko.driver')
    } else {
        systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
        systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
    }
}
